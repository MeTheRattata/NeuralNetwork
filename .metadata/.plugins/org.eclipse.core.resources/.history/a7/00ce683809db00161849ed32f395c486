import java.text.DecimalFormat;

public class NeuralNetwork 
{
	Neuron[] hidden;
	Neuron output;
	double[] hiddenInput;
	double[] outputInput;
	double finalOutput;
	double error;
	int streak = 0;
	DecimalFormat df = new DecimalFormat("0.000");
	
	public NeuralNetwork(int numInput, int numHidden)
	{
		hidden = new Neuron[numHidden];
		for(int i = 0; i < hidden.length; i++)
			hidden[i] = new Neuron(numInput);
		output = new Neuron(numHidden);
		outputInput = new double[numHidden];
	}
	
	public double learn(String newInput, double desiredInput)
	{
		System.out.println();
		System.out.println("Input: " + newInput);
		hiddenInput = strToDoubleArray(newInput);
		for(int i = 0; i < hidden.length; i++)
			outputInput[i] = hidden[i].train(hiddenInput, desiredInput);
		finalOutput = output.train(outputInput, desiredInput);
		output.sigma();
		error = output.getError();
		if((error <= 0.1 && error > 0) || (error >= -0.1 && error < 0))
			streak++;
		else
			streak = 0;
		return finalOutput;
	}
	public double forwardPropagate(String newInput, double desiredInput)
	{
		System.out.println();
		System.out.println("Input: " + newInput);
		printArray(output.weights);
		hiddenInput = strToDoubleArray(newInput);
		for(int i = 0; i < hidden.length; i++)
			outputInput[i] = hidden[i].activate(hiddenInput, desiredInput);
		finalOutput = output.activate(outputInput, desiredInput);
		return finalOutput;
	}
	public double[] strToDoubleArray(String str)
	{
		double[] nums = new double[str.length()];
		for(int i = 0; i < str.length(); i++)
		{
			nums[i] = (double) (str.charAt(i) - 96) / 26;
			System.out.print(df.format(nums[i]) + " ");
		}
		System.out.println();
			
		return nums;
	}
	public int getStreak()
	{
		return streak;
	}
	private void printArray(double[] arr)
	{
		for(int i = 0; i < arr.length; i++)
			System.out.print(arr[i] + " ");
		System.out.println();
	}
}