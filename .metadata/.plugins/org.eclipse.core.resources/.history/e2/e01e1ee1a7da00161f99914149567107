import java.util.Random;
import java.lang.Math;
import java.text.DecimalFormat;

public class Neuron 
{
	int numInput;
	double[] weights;
	double[] initWeights;
	double[] input;
	double output;
	double error;
	DecimalFormat df;
	
	public Neuron(int numInputs)
	{
		numInput = numInputs;
		weights = new double[numInput];
		Random gen = new Random();
		System.out.print("Initial weights: ");
		for(int i = 0; i < numInput; i++) 
			weights[i] = gen.nextDouble();
		printArray(weights);
		initWeights = weights;
		df = new DecimalFormat("0.000");
	}
	
	public void test(double[] newInput, double desiredOutput)
	{
		activate(newInput);
		findError(desiredOutput);
		System.out.println();
	}
	public void train(double[] newInput,
			double desiredOutput)
	{
		activate(newInput);
		findError(desiredOutput);
		adjustWeights();
		System.out.println();
	}
	public double activate(double[] newInput)
	{
		input = newInput;
		System.out.print("Input: ");
		printArray(newInput);
		output = 0;
		for(int i = 0; i < numInput; i++)
			output += input[i] * weights[i];
		System.out.println("Output: " + df.format(output));
		//return output;
		
		return 1 / (1 + Math.pow(Math.E, -output));
	}
	public void findError(double desiredOutput)
	{
		error = desiredOutput - output;
		System.out.println("Desired Output: " + df.format(desiredOutput));
		System.out.println("Error: " + df.format(error));
	}
	public void adjustWeights()
	{
		System.out.print("New Weights: ");
		for(int i = 0; i < numInput; i++)
			weights[i] += error * input[i] * output * (1 - output);
		printArray(weights);
		System.out.println();
			
	}
	private void printArray(double[] arr)
	{
		for(int i = 0; i < arr.length - 1; i++)
			System.out.print(df.format(arr[i]) + " ");
		System.out.println();
	}
}